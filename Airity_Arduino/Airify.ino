/* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled 2"
  https://create.arduino.cc/cloud/things/21f7ba00-5750-47d7-8d93-f08462892128 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  float temperature;
  float tVOC;
  float humidity;
  float cO2;
  CloudColor aiq;
  float methane;
  float airquality;
  CloudLocation coordinate;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include <SparkFunBME280.h>
#include <SparkFunCCS811.h>

#define CCS811_ADDR 0x5B //Default I2C Address
//#define CCS811_ADDR 0x5A //Alternate I2C Address

//Global sensor objects
CCS811 myCCS811(CCS811_ADDR);
BME280 myBME280;

int hue[6] = {120, 60, 30, 0, 220, 0};


#include "thingProperties.h"

void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500); 

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  coordinate = Location(37.36661006073335,-121.83597564697267);
  aiq = Color(100,100,100);
  
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
  
  Serial.println();

  Wire.begin();//initialize I2C bus


  //This begins the CCS811 sensor and prints error status of .begin()
  if (myCCS811.begin() == false)
  {
    Serial.print("CCS811 error. Please check wiring. Freezing...");
    while (1)
      ;
  }

  //Initialize BME280
  //For I2C, enable the following and disable the SPI section
  myBME280.settings.commInterface = I2C_MODE;
  myBME280.settings.I2CAddress = 0x77;
  myBME280.settings.runMode = 3; //Normal mode
  myBME280.settings.tStandby = 0;
  myBME280.settings.filter = 4;
  myBME280.settings.tempOverSample = 5;
  myBME280.settings.pressOverSample = 5;
  myBME280.settings.humidOverSample = 5;

  //Calling .begin() causes the settings to be loaded
  delay(10);  //Make sure sensor had enough time to turn on. BME280 requires 2ms to start up.
  byte id = myBME280.begin(); //Returns ID of 0x60 if successful
  if (id != 0x60)
  {
    Serial.println("Problem with BME280");
  }
  else
  {
    Serial.println("BME280 online");
  }
}

void loop() {
  ArduinoCloud.update();
  // Your code here 
  temperature = myBME280.readTempF();
  tVOC = myCCS811.getTVOC();
  cO2  = myCCS811.getCO2();
  humidity = myBME280.readFloatHumidity();
  methane = random(1,6);
  airquality = 25;
  //Check to see if data is ready with .dataAvailable()
  if (myCCS811.dataAvailable())
  {
    //If so, have the sensor read and calculate the results.
    //Get them later
    myCCS811.readAlgorithmResults();

    Serial.print("CO2[");
    //Returns calculated CO2 reading
    Serial.print(myCCS811.getCO2());
    Serial.print("] tVOC[");
    //Returns calculated TVOC reading
    Serial.print(myCCS811.getTVOC());
    Serial.print("] millis[");
    //Display the time since program start
    Serial.print(millis());
    Serial.print("]");
    Serial.print(" temp[");
    Serial.print(myBME280.readTempF(), 1);
    Serial.print("]F");
    Serial.print(" humidity[");
    Serial.print(myBME280.readFloatHumidity(), 0);
    Serial.print("]%");
    Serial.println();
  }
  
   if(tVOC <= 20 )
  {
    airquality = random(30, 34);
  }
  else if(tVOC >= 21 && tVOC <= 50)
  {
    airquality = random(60, 70);
  }
  else if(tVOC >= 51 && tVOC <= 100)
  {
   airquality =  random(175, 180);
  }
  else if(tVOC >= 101 && tVOC <= 150)
  {
    airquality = random(260, 265);
  }
  else if(tVOC >= 151 && tVOC <= 210)
  {
    airquality = random(320, 325);
  }
  else
  {
    airquality =  random(400, 402);
  }
  
  
  if(airquality <= 50 )
  {
    aiq = Color(hue[0],100,100);
  }
  else if(airquality >= 51 && airquality <= 100)
  {
    aiq = Color(hue[1],100,100);
  }
  else if(airquality >= 101 && airquality <= 150)
  {
    aiq = Color(hue[2],100,100);
  }
  else if(airquality >= 151 && airquality <= 200)
  {
    aiq = Color(hue[3],100,100);
  }
  else if(airquality >= 201 && airquality <= 300)
  {
    aiq = Color(hue[4],100,100);
  }
  else
  {
    aiq = Color(hue[5],100,50);
  }
  
  delay(10); //Don't spam the I2C bus
  
}

void onPredictionChange() {
  // Do something
}



void onTVOCChange() {
  // Do something
}


void onTemperatureChange() {
  // Do something
}





void onCO2Change() {
  // Do something
}


void onHumidityChange() {
  // Do something
}






void onAiqChange() {
  // Do something
}



void onMethaneChange() {
  // Do something
}


void onAirqualityChange() {
  // Do something
}
